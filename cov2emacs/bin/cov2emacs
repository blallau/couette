#!/usr/bin/env python
'''
    @copyright:
    @author:
        Bertrand LALLAU
'''

import logging
import optparse
import os
import sys

from coverage.config import CoverageConfig
from coverage.control import Coverage
from coverage.misc import CoverageException
from coverage.report import Reporter


class BasicReporter(Reporter):
    """
    Hacked subclass of coverage.py Reporter that instead of actually
    doing anything just yields the data.

    Since the .coverage file only contains the line's covered we need
    to use Coverage.py's logic to determine the 'missing' lines.
    """
    def __init__(self, report_file, ignore_errors=False):
        coverage = Coverage(report_file)
        coverage.use_cache(True)
        coverage.load()
        self.config = CoverageConfig()

        super(BasicReporter, self).__init__(coverage, ignore_errors)

    def analyse_files(self, filenames=None):
        filenames = filenames or []
        for filename in filenames:
            yield self.coverage.analysis2(filename)

    def report(self, morfs=None, directory=None):
        for result in self.report_files(morfs, directory):
            yield result

    def report_files(self, morfs, directory=None):
        """Run a reporting function on a number of morfs.

        No callback function, just yield the cu, statements, excluded and missing
        """
        self.find_code_units(morfs, self.config)

        self.directory = directory
        if self.directory and not os.path.exists(self.directory):
            os.makedirs(self.directory)

        for cu in self.code_units:
            try:
                # don't filter relative!!!
                # if not cu.relative:
                #     continue
                # statements, excluded, missing, _ = self.coverage._analyze(cu)
                analysis_instance = self.coverage._analyze(cu)
                yield (cu, analysis_instance.statements,
                       analysis_instance.excluded, analysis_instance.missing)
            except KeyboardInterrupt:
                raise
            except CoverageException, e:
                pass
            except:
                if not self.ignore_errors:
                    raise


class Coverage2Emacs(object):
    """
    Convert coverage.py data to something emacs likes
    """
    def __init__(self, cov_file):
        if os.path.basename(cov_file) != '.coverage':
            raise Exception('wrong filename %s' % cov_file)
        self.cov_file = cov_file

    def to_emacs_compile_mode(self, fout=None, filename=None,
                              combine_nums=False, status_line=True):
        """
        spit out something easy to parse in emacs ie:

        filename:linenumber:message

        Message can be Covered|Ignored|Missed
        """
        filename = os.path.abspath(filename)
        fout = fout or sys.stdout
        reporter = BasicReporter(self.cov_file)
        # convert the report output to a more useful generator
        data_iter = []

        # The file name for the module.
        # A list of line numbers of executable statements.
        # A list of line numbers of excluded statements.
        # A list of line numbers of statements not run (missing from execution)
        # A readable formatted string of the missing line numbers.
        for file_name, exec_total_lines_nb, _, not_exec, _ in reporter.analyse_files([filename]):
            # executable lines are lines that can "run" versus comments/etc
            if len(exec_total_lines_nb) == 0:
                percent_exec = 100
            else:
                percent_exec = 100*(len(exec_total_lines_nb) -
                                    len(not_exec) + 0.) / len(exec_total_lines_nb)
                data_iter.append((file_name, not_exec, 'MISSING',
                                  percent_exec))

        filtered_names = self.filter_old_files(data_iter)

        for filename, not_exec_lines, status, percent in filtered_names:
            if status == 'OLD':
                fout.write('OLD:?\n')
                # don't bother writing out stale data
                continue
            elif status:
                fout.write('SUCCESS:%d\n' % percent)
            if combine_nums:
                for line_chunk in combine_linenums(not_exec_lines):
                    fout.write('%s:%s:%s\n' %(filename, line_chunk, status))
            else:
                for num in not_exec_lines:
                    fout.write('%s:%s:%s\n' %(filename, num, status))


    def filter_old_files(self, data_iter):
        cov_date = os.stat(self.cov_file).st_mtime
        file_date = None
        prev_file = None
        for data in data_iter:
            filename = data[0]
            if prev_file is None or prev_file != filename:
                file_date = os.stat(filename).st_mtime

            if file_date > cov_date:
                # assume that file has been tweeked and data is wrong
                data = list(data)
                data[2] = "OLD"
            yield data
            prev_file = filename


def find_cov_file(start_file):
    """
    find parent dirs
    >>> list(parent_dirs('/usr/lib/python'))
    ['/usr/lib', '/usr', '/']
    """
    start_path = os.path.abspath(start_file)
    curr_dir = os.path.dirname(start_path)

    while True:
        if os.path.exists(os.path.join(curr_dir, ".git")):
            return curr_dir
        next_dir = os.path.dirname(curr_dir)
        if next_dir == curr_dir:
            return None
        else:
            curr_dir = next_dir


def is_older(filename, other_mtime):
    mtime = os.stat(filename).st_mtime
    return mtime > other_mtime


def find_coverage_file(start_file, file_to_find='.coverage'):
    start_mtime = os.stat(start_file).st_mtime

    find_cov = find_cov_file(start_file)
    if find_cov:
        potential = os.path.join(find_cov, file_to_find)

        if is_older(potential, start_mtime):
            return potential
        else:
            raise Exception("File too old")
    else:
        return None


def combine_linenums(linenums):
    """
    >>> list(combine_linenums([1,2,3]))
    ['1-3']
    >>> list(combine_linenums([1,3]))
    ['1', '3']
    >>> list(combine_linenums([1,3,5,6,7]))
    ['1', '3', '5-7']
    >>> list(combine_linenums([1,2,4,5,6]))
    ['1-2', '4-6']
    """
    prev_start = None
    prev_num = None
    for num in linenums:
        if prev_start is None:
            prev_start = num
        elif prev_num + 1 != num:
            if prev_start == prev_num:
                yield '%d' % prev_num
            else:
                yield '%d-%d' % (prev_start, prev_num)
            prev_start = num
        prev_num = num

    if prev_num and prev_start:
        if prev_start == prev_num:
            yield '%d' % prev_num
        else:
            yield '%d-%d' % (prev_start, num)
    elif prev_num:
        yield '%d' % prev_num


def main(prog_args):
    parser = optparse.OptionParser()
    parser.add_option('--python-file', help='specify Python file to analyze')
    opt, args = parser.parse_args(prog_args)
    python_file = opt.python_file

    c2e = None
    if python_file:
        try:
            cov = find_coverage_file(python_file)
            if not cov:
                print("NO_FILE::")
                return
            else:
                c2e = Coverage2Emacs(cov)
        except Exception:
            print("FILE_TOO_OLD::")
            return
        c2e.to_emacs_compile_mode(filename=python_file)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
